from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition, SlideTransition
from kivy.clock import Clock
from kivy.uix.gridlayout import GridLayout
from kivy.properties import ObjectProperty
from kivy.uix.floatlayout import FloatLayout
import shlex, subprocess
import sys
import os
import copy
import string
import csv
from pathlib import Path
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from kivy.factory import Factory
from kivy.uix.popup import Popup
import os
import random


def predict(filename):

    params = []
    cmd_line="python pdfid.py /"
    row_list=["obj","endobj","stream","endstream","xref","trailer","startxref","page","encrypt","objstm","js","javascript","aa","openaction","acroform","jbig2decode","richmedia","launch","embeddedfile","xfa","colours"]
    try:
        cmd_line = cmd_line + filename
        args = shlex.split(cmd_line)
        process = subprocess.Popen(args, stdout=subprocess.PIPE)
        res=[]
        for line in process.stdout:
            s=copy.deepcopy(line)
            res.append(s)
        
        fin=[]
        lines=[]
        for sp in res:
            sp=sp.decode().split(" ")
            fin.append(sp)

        for item in fin:
            lines.append(item[-1])     
        lines[:] = [line.rstrip('\n') for line in lines]     
        lines = lines[2:-1]

        for item in lines:
            params.append(float(item))
    except:
        print("skipped file " + filename)

    params = [params]

    data_train = pd.read_csv("dataset.csv")
    df = pd.DataFrame(data_train)

    df.fillna(0, inplace=True)
    X_train=df.drop(['tag'], axis=1)
    y_train=pd.read_csv("dataset.csv", usecols = ['tag'])
    y_train.fillna(0, inplace=True)

    clf = MLPClassifier(hidden_layer_sizes=(4,8), max_iter=300,activation = 'relu',solver='adam',random_state=1)
    clf.fit(X_train, y_train.values.ravel())
    print(len(params[0]))
    y_pred = clf.predict(params)[0]
    return y_pred


Builder.load_file("main.kv")


class Menu(GridLayout):
    pass


class LoadDialog(FloatLayout):
    load = ObjectProperty(None)
    cancel = ObjectProperty(None)


class WelcomeScreen(Screen):
    def on_enter(self):
        Clock.schedule_once(lambda dt: self.move_to_main(), 3)

    def move_to_main(self):
        self.manager.transition = FadeTransition()
        self.manager.current = "BlankScreen"


class BlankScreen(Screen):
    def on_enter(self):
        Clock.schedule_once(lambda dt: self.move_to_main(), 1)

    def move_to_main(self):
        self.manager.transition = FadeTransition()
        self.manager.transition.direction = "right"
        self.manager.current = "MainScreen"


class SafeScreen(Screen):
    def on_enter(self):
        Clock.schedule_once(lambda dt: self.move_to_main(), 3)

    def move_to_main(self):
        self.manager.transition = SlideTransition()
        self.manager.transition.direction = "left"
        self.manager.current = "MainScreen"


class MaliciousScreen(Screen):
    def on_enter(self):
        Clock.schedule_once(lambda dt: self.move_to_main(), 3)

    def move_to_main(self):
        self.manager.transition = SlideTransition()
        self.manager.transition.direction = "right"
        self.manager.current = "MainScreen"


class MainScreen(Screen):
    chosen_file = None

    def dismiss_popup(self):
        self._popup.dismiss()

    def show_load(self):
        content = LoadDialog(load=self.load, cancel=self.dismiss_popup)
        self._popup = Popup(title="Load file", content=content,
                            size_hint=(0.9, 0.9))
        self._popup.open()

    def load(self, path, filename):
        self.chosen_file = os.path.join(path, filename[0])
        self.children[0].children[0].children[0].children[1].children[1].text = self.chosen_file
        self.dismiss_popup()

    def check(self):
        if self.chosen_file == None:
            return

        # Check self.chosen_file instead!!!
        result = predict(self.chosen_file)

        self.manager.transition = SlideTransition()
        if result == 1:
            self.manager.transition.direction = "left"
            self.manager.current = "MaliciousScreen"
        else:
            self.manager.transition.direction = "right"
            self.manager.current = "SafeScreen"


class MyApp(App):

    file_info = ObjectProperty(None)

    def build(self):
        screen_manager = ScreenManager()
        screen_manager.add_widget(WelcomeScreen(name="WelcomeScreen"))
        screen_manager.add_widget(BlankScreen(name="BlankScreen"))
        screen_manager.add_widget(MainScreen(name="MainScreen"))
        screen_manager.add_widget(SafeScreen(name="SafeScreen"))
        screen_manager.add_widget(MaliciousScreen(name="MaliciousScreen"))
        return screen_manager


Factory.register('Root', cls=MyApp)

if __name__ == "__main__":
    MyApp().run()
